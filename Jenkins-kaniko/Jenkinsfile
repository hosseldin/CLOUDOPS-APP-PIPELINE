pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          name: kaniko
          namespace: jenkins-ns
        spec:
          containers:
            - name: kaniko
              image: gcr.io/kaniko-project/executor:debug
              command:
                - /busybox/cat
              tty: true
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: AWS_SECRET_ACCESS_KEY
              volumeMounts:
                - name: aws-config
                  mountPath: /kaniko/.aws
          volumes:
            - name: aws-config
              secret:
                secretName: aws-credentials
      '''
    }
  }

  environment {
    AWS_REGION = 'us-east-1'
    ECR_REGISTRY = '773893527461.dkr.ecr.us-east-1.amazonaws.com'
    ECR_REPOSITORY = 'node-app-jenkins'
    TARGET_FOLDER = 'nodeapp'  // Specify the folder you want to watch for changes
  }

  triggers {
    githubPush()  // This triggers the pipeline when a push is made to the GitHub repository
  }

  stages {
    // Stage to checkout the code from GitHub
    stage('Checkout') {
        steps {
            checkout scm  // Checkout the code from GitHub
        }
    }
    
    // Stage to check for changes in the specific folder on repositoryyy
    stage('Check for Changes in Specific Folder') {
        steps {
            script {
                // Get the list of files that have changed in the commit
                def changedFiles = sh(script: 'git diff --name-only $GIT_COMMIT^ $GIT_COMMIT', returnStdout: true).trim()
                echo "Changed Files: ${changedFiles}"

                // Check if any of the changed files are in the TARGET_FOLDER
                if (!changedFiles.contains(TARGET_FOLDER)) {
                    echo "No changes in the folder ${TARGET_FOLDER}. Skipping pipeline."
                    currentBuild.result = 'SUCCESS' // Mark the build as successful but do not run the build steps
                    return // Exit early, skipping the build steps
                }
            }
        }
    }

    // Stage for building and pushing to ECR (only if the folder was changed)
    stage('Build & Push to ECR') {
      when {
        expression {
            // Check if the file changes include any changes in the target folder
            def changedFiles = sh(script: 'git diff --name-only $GIT_COMMIT^ $GIT_COMMIT', returnStdout: true).trim()
            return changedFiles.contains('nodeapp/')
        }
      }
      steps {
        container('kaniko') {
          script {
            // Configure Docker credentials for ECR
            sh """
              # Create the Docker config directory
              mkdir -p /kaniko/.docker

              # Create config.json with ECR credentials helper
              echo '{
                "credHelpers": {
                  "${ECR_REGISTRY}": "ecr-login"
                }
              }' > /kaniko/.docker/config.json

              # Build and push using Kaniko
              /kaniko/executor \
                --context=git://github.com/hosseldin/CLOUDOPS-PIPELINE.git#refs/heads/main \
                --context-sub-path=nodeapp \
                --dockerfile=Dockerfile \
                --destination=${ECR_REGISTRY}/${ECR_REPOSITORY}:v${BUILD_NUMBER}
            """
          }
        }
      }
    }

    // Stage for notifying Slack
    stage('Notify Slack') {
      steps {
        script {
            slackSend(
                channel: 'eks-jenkins-notifications',
                attachments: [
                    [
                    fallback: "Build #${env.BUILD_NUMBER} finished",
                    color: '#36a64f',
                    title: "Build #${env.BUILD_NUMBER} Complete",
                    text: "Project: *${env.JOB_NAME}*\nBranch: *${env.GIT_BRANCH}*\nStatus: *SUCCESS*\nCommit: *${env.GIT_COMMIT}*",
                    fields: [
                        [
                        title: "Started by",
                        value: "${currentBuild.getBuildCauses()[0].userName ?: 'Auto Triggered'}",
                        short: true
                        ],
                        [
                        title: "Duration",
                        value: "${currentBuild.durationString}",
                        short: true
                        ]
                    ],
                    image_url: 'https://mediaaws.almasryalyoum.com/news/large/2025/01/16/2583858_0.jpg'
                    ]
                ]
            )
        }
      }
    }
  }
}
